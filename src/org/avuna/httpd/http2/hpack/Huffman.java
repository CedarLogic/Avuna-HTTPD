/*	Avuna HTTPD - General Server Applications
    Copyright (C) 2015 Maxwell Bruce

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/

package org.avuna.httpd.http2.hpack;

import java.io.ByteArrayOutputStream;

public class Huffman {
	private static final String[] table = new String[]{//
	"1111111111000", //
			"11111111111111111011000", //
			"1111111111111111111111100010", //
			"1111111111111111111111100011", //
			"1111111111111111111111100100", //
			"1111111111111111111111100101", //
			"1111111111111111111111100110", //
			"1111111111111111111111100111", //
			"1111111111111111111111101000", //
			"111111111111111111101010", //
			"111111111111111111111111111100", //
			"1111111111111111111111101001", //
			"1111111111111111111111101010", //
			"111111111111111111111111111101", //
			"1111111111111111111111101011", //
			"1111111111111111111111101100", //
			"1111111111111111111111101101", //
			"1111111111111111111111101110", //
			"1111111111111111111111101111", //
			"1111111111111111111111110000", //
			"1111111111111111111111110001", //
			"1111111111111111111111110010", //
			"111111111111111111111111111110", //
			"1111111111111111111111110011", //
			"1111111111111111111111110100", //
			"1111111111111111111111110101", //
			"1111111111111111111111110110", //
			"1111111111111111111111110111", //
			"1111111111111111111111111000", //
			"1111111111111111111111111001", //
			"1111111111111111111111111010", //
			"1111111111111111111111111011", //
			"010100", //
			"1111111000", //
			"1111111001", //
			"111111111010", //
			"1111111111001", //
			"010101", //
			"11111000", //
			"11111111010", //
			"1111111010", //
			"1111111011", //
			"11111001", //
			"11111111011", //
			"11111010", //
			"010110", //
			"010111", //
			"011000", //
			"00000", //
			"00001", //
			"00010", //
			"011001", //
			"011010", //
			"011011", //
			"011100", //
			"011101", //
			"011110", //
			"011111", //
			"1011100", //
			"11111011", //
			"111111111111100", //
			"100000", //
			"111111111011", //
			"1111111100", //
			"1111111111010", //
			"100001", //
			"1011101", //
			"1011110", //
			"1011111", //
			"1100000", //
			"1100001", //
			"1100010", //
			"1100011", //
			"1100100", //
			"1100101", //
			"1100110", //
			"1100111", //
			"1101000", //
			"1101001", //
			"1101010", //
			"1101011", //
			"1101100", //
			"1101101", //
			"1101110", //
			"1101111", //
			"1110000", //
			"1110001", //
			"1110010", //
			"11111100", //
			"1110011", //
			"11111101", //
			"1111111111011", //
			"1111111111111110000", //
			"1111111111100", //
			"11111111111100", //
			"100010", //
			"111111111111101", //
			"00011", //
			"100011", //
			"00100", //
			"100100", //
			"00101", //
			"100101", //
			"100110", //
			"100111", //
			"00110", //
			"1110100", //
			"1110101", //
			"101000", //
			"101001", //
			"101010", //
			"00111", //
			"101011", //
			"1110110", //
			"101100", //
			"01000", //
			"01001", //
			"101101", //
			"1110111", //
			"1111000", //
			"1111001", //
			"1111010", //
			"1111011", //
			"111111111111110", //
			"11111111100", //
			"11111111111101", //
			"1111111111101", //
			"1111111111111111111111111100", //
			"11111111111111100110", //
			"1111111111111111010010", //
			"11111111111111100111", //
			"11111111111111101000", //
			"1111111111111111010011", //
			"1111111111111111010100", //
			"1111111111111111010101", //
			"11111111111111111011001", //
			"1111111111111111010110", //
			"11111111111111111011010", //
			"11111111111111111011011", //
			"11111111111111111011100", //
			"11111111111111111011101", //
			"11111111111111111011110", //
			"111111111111111111101011", //
			"11111111111111111011111", //
			"111111111111111111101100", //
			"111111111111111111101101", //
			"1111111111111111010111", //
			"11111111111111111100000", //
			"111111111111111111101110", //
			"11111111111111111100001", //
			"11111111111111111100010", //
			"11111111111111111100011", //
			"11111111111111111100100", //
			"111111111111111011100", //
			"1111111111111111011000", //
			"11111111111111111100101", //
			"1111111111111111011001", //
			"11111111111111111100110", //
			"11111111111111111100111", //
			"111111111111111111101111", //
			"1111111111111111011010", //
			"111111111111111011101", //
			"11111111111111101001", //
			"1111111111111111011011", //
			"1111111111111111011100", //
			"11111111111111111101000", //
			"11111111111111111101001", //
			"111111111111111011110", //
			"11111111111111111101010", //
			"1111111111111111011101", //
			"1111111111111111011110", //
			"111111111111111111110000", //
			"111111111111111011111", //
			"1111111111111111011111", //
			"11111111111111111101011", //
			"11111111111111111101100", //
			"111111111111111100000", //
			"111111111111111100001", //
			"1111111111111111100000", //
			"111111111111111100010", //
			"11111111111111111101101", //
			"1111111111111111100001", //
			"11111111111111111101110", //
			"11111111111111111101111", //
			"11111111111111101010", //
			"1111111111111111100010", //
			"1111111111111111100011", //
			"1111111111111111100100", //
			"11111111111111111110000", //
			"1111111111111111100101", //
			"1111111111111111100110", //
			"11111111111111111110001", //
			"11111111111111111111100000", //
			"11111111111111111111100001", //
			"11111111111111101011", //
			"1111111111111110001", //
			"1111111111111111100111", //
			"11111111111111111110010", //
			"1111111111111111101000", //
			"1111111111111111111101100", //
			"11111111111111111111100010", //
			"11111111111111111111100011", //
			"11111111111111111111100100", //
			"111111111111111111111011110", //
			"111111111111111111111011111", //
			"11111111111111111111100101", //
			"111111111111111111110001", //
			"1111111111111111111101101", //
			"1111111111111110010", //
			"111111111111111100011", //
			"11111111111111111111100110", //
			"111111111111111111111100000", //
			"111111111111111111111100001", //
			"11111111111111111111100111", //
			"111111111111111111111100010", //
			"111111111111111111110010", //
			"111111111111111100100", //
			"111111111111111100101", //
			"11111111111111111111101000", //
			"11111111111111111111101001", //
			"1111111111111111111111111101", //
			"111111111111111111111100011", //
			"111111111111111111111100100", //
			"111111111111111111111100101", //
			"11111111111111101100", //
			"111111111111111111110011", //
			"11111111111111101101", //
			"111111111111111100110", //
			"1111111111111111101001", //
			"111111111111111100111", //
			"111111111111111101000", //
			"11111111111111111110011", //
			"1111111111111111101010", //
			"1111111111111111101011", //
			"1111111111111111111101110", //
			"1111111111111111111101111", //
			"111111111111111111110100", //
			"111111111111111111110101", //
			"11111111111111111111101010", //
			"11111111111111111110100", //
			"11111111111111111111101011", //
			"111111111111111111111100110", //
			"11111111111111111111101100", //
			"11111111111111111111101101", //
			"111111111111111111111100111", //
			"111111111111111111111101000", //
			"111111111111111111111101001", //
			"111111111111111111111101010", //
			"111111111111111111111101011", //
			"1111111111111111111111111110", //
			"111111111111111111111101100", //
			"111111111111111111111101101", //
			"111111111111111111111101110", //
			"111111111111111111111101111", //
			"111111111111111111111110000", //
			"11111111111111111111101110", //
			"111111111111111111111111111111", //
	};
	
	public byte[] encode(byte[] input) {
		BitOutputStream bout = new BitOutputStream();
		for (int i = 0; i < input.length; i++) {
			bout.writeBinary(table[input[i]]);
		}
		bout.writeBinary(table[256]);
		return bout.toByteArray();
	}
	
	public byte[] decode(byte[] input) {
		ByteArrayOutputStream buf = new ByteArrayOutputStream();
		BitInputStream bin = new BitInputStream(input);
		String bits = "";
		do {
			boolean bit = bin.readBit();
			bits = bits + (bit ? "1" : "0");
			for (int i = 0; i < table.length; i++) {
				if (table[i].equals(bits)) {
					if (i == 256) break;
					buf.write(i);
					bits = "";
				}
			}
		}while (bin.available());
		return buf.toByteArray();
	}
}
